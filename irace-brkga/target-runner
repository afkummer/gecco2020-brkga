#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2020
# Alberto Francisco Kummer Neto (afkneto@inf.ufrgs.br),
# Luciana Salete Buriol (buriol@inf.ufrgs.br) and
# Olinto César Bassi de Araújo (olinto@ctism.ufsm.br)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#
# Script used to interface the irace with the solver.
# $1 holds an ID generated by irace to identify the experiment
# $2 is the instance ID
# $3 holds the seed
# $4 is the instance name
#
# The other values set the parameters to the BRKGA, following the order
# of the `parameters.txt` file.
#
# This file is based on the ACOTSP example from the irace package.
#


# I copied this error function from the examples of the irace.
error() {
   echo "`TZ=UTC date`: $0: error: $@" >&2
   exit 1
}

# Path to the solver from inside the arena directory.
EXE=../../build/brkga

# Set the number of decoding thread to be used by the BRKGA.
OMP_NUM_THREADS=3

# Gives more meaningful names to the script arguments
CONFIG_ID="$1"
INSTANCE_ID="$2"
SEED="$3"
INSTANCE="$4"

# Once again, I _stoled_ some code from the irace examples.
shift 4 || error "Not enough parameters"
CONFIG_PARAMS=$*

# Sets the file redirection for the stdout and stderr.
# Useful for debugging cases.
STDOUT=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stdout
STDERR=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stderr

if [ ! -x "${EXE}" ]; then
    error "${EXE}: not found or not executable (pwd: $(pwd))"
fi

# Runs the solver.
$EXE $INSTANCE $SEED ${CONFIG_PARAMS} 1> $STDOUT 2> $STDERR

# Check if there is any data in the stdout.
# The inexistence of this file may indicate an error in the execution
# of the solver.
if [ ! -s "${STDOUT}" ]; then
   error "${STDOUT}: No such file or directory"
fi

# If the stdout file exists, its last line should contains
# the cost of the best solution found during the experiment.
# Then, try to extract a number from it, or issue an error.
COST=$(tail -n1 ${STDOUT})
if ! [[ "$COST" =~ ^[-+0-9.e]+$ ]] ; then
    error "${STDOUT}: Output is not a number"
fi

# Print the cost. The irace takes it value from the stdout of the target runner.
echo "$COST"

# Optional step.
# Remove temporary files and signals a success exit to the irace.
rm -f "${STDOUT}" "${STDERR}"
rm -f best.* stat.* cmp.*
exit 0
